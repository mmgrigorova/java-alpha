<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>telerikacademy</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJX
			TlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAF
			gAdUdHlwZVRyb3dzXxAdU2VsZWN0aW9uRGV0YWlsVHlwZU5TSW5k
			ZXhTZXTSFwsYGVxOU1JhbmdlQ291bnQQAIAG0hscHR5aJGNsYXNz
			bmFtZVgkY2xhc3Nlc1pOU0luZGV4U2V0oh8gWk5TSW5kZXhTZXRY
			TlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVk
			QXJjaGl2ZXLRJidUZGF0YYABAAgAEQAaACMALQAyADcAQABGAE0A
			VQBgAGcAagBsAG4AcQBzAHUAdwB8AIEAoQCmALMAtQC3ALwAxwDQ
			ANsA3gDpAPIA9wEEAQcBGQEcASEAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {694, 450}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>/* 2. Write a SQL query to find all information about all departments (use "TelerikAcademy" database).*/
select d.departmentid, d.name, e.FirstName, e.LastName
from departments d
join employees e on d.managerid = e.employeeid;


-- 3.	Write a SQL query to find all department names.
select d.name from departments d;


-- 4.	Write a SQL query to find the salary of each employee.
select e.`FirstName`, e.lastname, e.`Salary` from employees e order by e.lastname;


-- 5.	Write a SQL to find the full name of each employee.
select concat(e.`FirstName`, " ",   e.lastname) as fullName, e.`Salary` from employees e order by e.lastname;


-- 6.	Write a SQL query to find the email addresses of each employee (by his first and last name). Consider that the mail domain is telerik.com. Emails should look like “John.Doe@telerik.com". The produced column should be named "Full Email Addresses".
select concat(e.`FirstName`, " ",   e.lastname) as fullName, 
	concat(e.FirstName, ".",   e.lastname, "@telerik.com") as "Full Email Addresses" 
from employees e 
order by e.firstname;

select concat(e.`FirstName`, " ",   e.lastname) as fullName, 
	concat(e.FirstName, ".",   e.lastname, "@telerik.com") as fullmail 
from employees e 
where firstname like "a%"
order by e.firstname;


-- 7.	Write a SQL query to find all different employee salaries.
select DISTINCT e.`Salary` from employees e order by e.salary;


-- 8.	Write a SQL query to find all information about the employees whose job title is “Sales Representative“.
select * from employees e where jobtitle = "Sales Representative";


-- 9.	Write a SQL query to find the names of all employees whose first name starts with "SA".
select * from employees e where e.firstname like "Sa%";


-- 10.	Write a SQL query to find the names of all employees whose last name contains "ei".
select * from employees e where e.firstname like "%ei%";


-- 11.	Write a SQL query to find the salary of all employees whose salary is in the range [20000…30000].
select * from employees e where salary between 20000 and 30000;


-- 12.	Write a SQL query to find the names of all employees whose salary is 25000, 14000, 12500 or 23600.
select * from employees e where salary in (25000, 14000, 12500, 23600);


-- 13.	Write a SQL query to find all employees that do not have manager.
select * from employees where managerid is null;


-- 14.	Write a SQL query to find all employees that have salary more than 50000. Order them in decreasing order by salary.
select * from employees 
where salary &gt; 50000
order by salary desc;


-- 15.	Write a SQL query to find the top 5 best paid employees.
select * from employees 
order by salary desc
limit 5;


-- 16.	Write a SQL query to find all employees along with their address.
select e.firstname, e.lastname, a.* from employees e
join addresses a on e.addressid = a.addressid;


-- 17.	Write a SQL query to find all employees and their address.
select e.firstname, e.lastname, a.*, t.name from employees e
join addresses a on e.addressid = a.addressid
join towns t on a.townid = t.townid;


-- 18.	Write a SQL query to find all employees along with their manager.
select e.firstname, e.lastname, m.firstname as "manager first name", m.lastname as "manager last name" from employees e
join employees m on e.managerid = m.employeeid;


-- 19.	Write a SQL query to find all employees, along with their manager and their address.
select e.firstname, e.lastname,a.*, m.firstname as "manager first name", m.lastname as "manager last name" from employees e
join employees m on e.managerid = m.employeeid
join addresses a on e.addressid = a.addressid;


-- 20.	Write a SQL query to find all departments and all town names as a single list.
select d.name from departments d
union 
select t.name from towns t;

-- 21.	Write a SQL query to find all the employees and the manager for each of them along with the employees that do not have manager. Use right outer join. Rewrite the query to use left outer join.
select e.firstname, e.lastname, m.firstname as "manager first name", m.lastname as "manager last name" 
from employees e
left join employees m on e.managerid = m.employeeid;

/*
22.	Write a SQL query to find the names of all employees from the departments "Sales" and "Finance" whose hire year is between 1995 and 2005. */
select * from employees e
join departments d on d.departmentid = e.DepartmentID
where d.Name in ("Sales", "Finance")
and YEAR(e.hiredate) between 1995 and 2005;
-- 	hiredate between '1995-01-01' and '2005-12-31'; 


## 05. Advanced SQL

-- 1.	Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company.
select e.firstname, e.lastname, e.salary 
from employees e
where e.salary = (select min(s.salary) from employees s);


-- 2.	Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher than the minimal salary for the company.
select e.firstname, e.lastname, e.salary 
from employees e
where e.salary &lt;= (select min(s.salary) from employees s) * 1.1 ;

-- 3.	Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department.
select e.firstname, e.lastname, e.salary, e.departmentid
from employees e
where e.salary = (select min(s.salary) 
					from employees s
					where e.departmentid = s.departmentid);



-- 4.	Write a SQL query to find the average salary in the department #1.
select avg(salary) from employees 
where departmentid = 1;



-- 5.	Write a SQL query to find the average salary in the "Sales" department.
select avg(e.salary) 
from employees e
join departments d on e.departmentid = d.departmentid
where d.name = "Sales";

-- 6.	Write a SQL query to find the number of employees in the "Sales" department.
select count(*)
from employees e
join departments d on e.departmentid = d.departmentid
where d.name = "Sales";

-- 7.	Write a SQL query to find the number of all employees that have manager.
select count(*) from employees where managerid is not null;

-- 8.	Write a SQL query to find the number of all employees that have no manager.
select count(*) from employees where managerid is null;


-- 9.	Write a SQL query to find all departments and the average salary for each of them.
select AVG(e.salary), d.name 
from employees e
join departments d on d.departmentid = e.departmentid
group by e.departmentid;

-- 10.	Write a SQL query to find the count of all employees in each department and for each town.
select count(*) , d.name, t.name
from employees e
join departments d on e.departmentid = d.departmentid
join addresses a on e.addressid = a.addressid
join towns t on t.townid = a.townid
group by d.name, t.name;

-- 11.	Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.
select e.firstname as MgrFirstname, e.lastname as MgrLastname
from employees e
group by managerid
having count(*) = 5;

-- 12.	Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)".
select e.firstname, e.lastname,
	COALESCE(m.firstname, "(no manager)") as "manager first name", 
	COALESCE(m.lastname, "(no manager)") as "manager last name"
from employees e
left join employees m on e.managerid = m.employeeid;

-- 13.	Write a SQL query to find the names of all employees whose last name is exactly 5 characters long.
select e.firstname, e.lastname from employees e
where CHAR_LENGTH(e.lastname) = 5;

-- 14.	Write a SQL query to display the current date and time in the following format "`day.month.year hour:minutes:seconds:milliseconds`".
select DATE_FORMAT(CURRENT_TIMESTAMP(5), '%d.%m.%Y %H:%i:%s:%f') ;

-- 15.	Write a SQL query to display the average employee salary by department and job title.
select avg(salary), s.name, e.jobtitle 
from employees e 
join departments s on e.departmentid = s.departmentid
group by e.departmentid, e.jobtitle;


-- 16.	Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the employees that take it.
select min(salary), s.name, e.jobtitle, e.firstname, e.lastname
from employees e 
join departments s on e.departmentid = s.departmentid
group by e.departmentid, e.jobtitle;

-- 17.	Write a SQL query to display the town where maximal number of employees work.
select t.name, count(t.name) as cnt
from employees e
join addresses a on e.addressid = a.addressid
join towns t on a.townid = t.townid
group by a.townid
having cnt = (
select max(cnt)
	from (
		select count(*) as cnt from employees b 
		join addresses ad on b.addressid = ad.addressid
		group by ad.townid
	) x 
);

select x.name, max(cnt) from
	(select  count(*) as cnt, t.name as name
	from employees e
	join addresses a on e.employeeid = a.addressid
	join towns t on t.townid
	group by a.townid) as x;


--  18.	Write a SQL query to display the number of managers from each town.
select count(*), t.name 
from employees m 
join employees e on m.managerid = e.employeeid
join addresses a on e.addressid = a.addressid 
join towns t on a.townid = t.townid
group by t.townid;


/* 
19. Create a table `Users`. Users should have username, password, full name and last login time.
	*	Choose appropriate data types for the table fields. Define a primary key column with a primary key constraint.
	*	Define the primary key column as auto-increment to facilitate inserting records.
	*	Define unique constraint to avoid repeating usernames.
	*	Define a check constraint to ensure the password is at least 5 characters long. *\/
	 */

-- 	 drop table users;
	 
create table IF NOT EXISTS Users(
		 `id` INT(11) NOT NULL AUTO_INCREMENT,
        `username` VARCHAR(255) UNIQUE NOT NULL, 
        `password` CHAR(40) UNIQUE NOT NULL,
        `fullname` VARCHAR(255) NOT NULL,
        `lastlogintime` DATETIME,
        PRIMARY KEY (`id`),
        INDEX `id` (`id` ASC),
--          CONSTRAINT password_lenght CHECK (LENGTH(password) &gt;= 5)
        );
      /*   
        ALTER TABLE Users DROP CONSTRAINT password_lenght ;

		ALTER TABLE Users ADD CONSTRAINT password_lenght CHECK (LENGTH(password) &gt;= 4); */

-- select * from users;
        
	
/*
20.	Write SQL statements to insert in the `Users` table the names of all employees from the `Employees` table.
	*	Combine the first and last names as a full name.
	*	For username use the first letter of the first name + the last name (in lowercase).
	*	Use the same for the password, and `NULL` for last login time.*/

INSERT INTO users (username, `password`, fullname)
select REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname,  e.employeeid)), ' ', '') as username, 
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`,
	CONCAT(e.firstname, " ", e.lastname) as fullname
	from employees e;


-- 21.	Write a SQL statement that changes the password to `NULL` for all users that have not been in the system since 10.03.2010.
-- update users  set password = NULL where lastlogintime &lt; '2010-03-10' or  lastlogintime is null;
-- select * from users u where lastlogintime &lt; '2010-03-10' or  lastlogintime is null;

-- 22.	Write a SQL statement that deletes all users without passwords (`NULL` password).
-- delete from users where `password` is null;
</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>select * from users</string>
		<string>delete from users where `password` is null</string>
		<string>delete from users u where `password` is null</string>
		<string>update users  set password = NULL where lastlogintime &lt; '2010-03-10' or  lastlogintime is null</string>
		<string>select * from users u where lastlogintime &lt; '2010-03-10' or  lastlogintime is null</string>
		<string>select * from users u where lastlogintime &lt; '2010-03-10'</string>
		<string>INSERT INTO users (username, `password`, fullname)
select REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname,  e.employeeid)), ' ', '') as username, 
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`,
	CONCAT(e.firstname, " ", e.lastname) as fullname
	from employees e</string>
		<string>INSERT INTO users (username, `password`, fullname)
select REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username, 
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`,
	CONCAT(e.firstname, " ", e.lastname) as fullname
	from employees e</string>
		<string>select REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username, 
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`,
	CONCAT(e.firstname, " ", e.lastname) as fullname
	from employees e</string>
		<string>select CONCAT(e.firstname, " ", e.lastname, e.employeeid) as username, 
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`,
	CONCAT(e.firstname, " ", e.lastname) as fullname
	from employees e</string>
		<string>select CONCAT(e.firstname, " ", e.lastname, e.employeeid) as username, 
	REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username,
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`
	from employees e</string>
		<string>INSERT INTO users (username, `password`, fullname)
select CONCAT(e.firstname, " ", e.lastname, e.employeeid) as username, 
	REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username,
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`
	from employees e</string>
		<string>select CONCAT(e.firstname, " ", e.lastname) as username, 
	REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username,
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`
	from employees e</string>
		<string>INSERT INTO users (username, `password`, fullname)
select CONCAT(e.firstname, " ", e.lastname) as username, 
	REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username,
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname, e.employeeid)), ' ', '')
	END  as `password`
-- 	,
-- 	LENGTH(	REPLACE(LOWER(CONCAT(e.firstname, e.lastname)), ' ', '') )
	from employees e</string>
		<string>INSERT INTO users (username, `password`, fullname)
select CONCAT(e.firstname, " ", e.lastname) as username, 
	REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username,
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.employeeid)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '')
	END  as `password`
-- 	,
-- 	LENGTH(	REPLACE(LOWER(CONCAT(e.firstname, e.lastname)), ' ', '') )
	from employees e</string>
		<string>INSERT INTO users (username, `password`, fullname)
select CONCAT(e.firstname, " ", e.lastname) as username, 
	REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username,
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname, e.id)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '')
	END  as `password`
-- 	,
-- 	LENGTH(	REPLACE(LOWER(CONCAT(e.firstname, e.lastname)), ' ', '') )
	from employees e</string>
		<string>INSERT INTO users (username, `password`, fullname)
select CONCAT(e.firstname, " ", e.lastname) as username, 
	REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') as username,
	CASE
		WHEN 
		LENGTH(REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '') ) &lt; 5
		THEN 
			REPLACE(LOWER(CONCAT(e.firstname, e.lastname)), ' ', '') 
	ELSE
		REPLACE(LOWER(CONCAT(LEFT(e.firstname, 1), e.lastname)), ' ', '')
	END  as `password`
-- 	,
-- 	LENGTH(	REPLACE(LOWER(CONCAT(e.firstname, e.lastname)), ' ', '') )
	from employees e</string>
		<string>ALTER TABLE Users DROP CONSTRAINT password_lenght</string>
		<string>create table IF NOT EXISTS Users(
		 `id` INT(11) NOT NULL AUTO_INCREMENT,
        `username` VARCHAR(255) UNIQUE NOT NULL, 
        `password` CHAR(40) UNIQUE NOT NULL,
        `fullname` VARCHAR(255) NOT NULL,
        `lastlogintime` DATETIME,
        PRIMARY KEY (`id`),
        INDEX `id` (`id` ASC),
         CONSTRAINT password_lenght CHECK (LENGTH(password) &gt;= 5)
        )</string>
		<string>drop table users</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.5.5-10.3.8-MariaDB</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
